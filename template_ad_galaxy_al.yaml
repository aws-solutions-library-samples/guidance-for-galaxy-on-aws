---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AMIId:
    Type: String
    Default: ami-00c39f71452c08778
    Description: Amazon Machine Image (AMI) used for the Galaxy Webserver. Currently only Ubuntu 22.04 is supported.
  ActiveDirectorySearchUser:
    Type: String
    Description: Service account to query the Active Directroy
    Default: admin@matt.corp.cmo
  ActiveDirectorySearchUserPassword:
    Type: String
    Description: Service account to query the Active Directroy
    Default: 3141ma!@#
    NoEcho: True
  ActiveDirectoryDomainController:
    Type: String
    Description: IP address or DNS alias of a Active Directory domain controller
    Default: 172.31.27.214
  ActiveDirectoryDomainQuery:
    Type: String
    Description: Comma-separated list of domain container and organizational units which are granted access to Galaxy, e.g. "dc=amazon,dc=com"
    Default: "dc=matt,dc=corp,dc=cmo"
  VPCActiveDirectory:
    Type: AWS::EC2::VPC::Id
    Default: vpc-01a7f457b5802cb22
    Description: NOT NEEDED FOR PROD
  AdminEmailsGalaxy:
    Type: String
    Default: admin@mapk.com
    Description: A comma-separated list of email addresses with admin access.
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - VPC'

  FlowLogLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: {}

  FlowLogDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'vpc-flow-logs.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: flowlog-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt FlowLogLogGroup.Arn
  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      DeliverLogsPermissionArn: !GetAtt FlowLogDeliveryRole.Arn
      LogGroupName: !Ref FlowLogLogGroup

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - InternetGateway'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NATGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  EIP1:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  EIP2:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - PublicRouteTable1'

  DefaultPublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - PublicRouteTable2'

  DefaultPublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.0.0/26
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - Public Subnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.0.128/26
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - Public Subnet2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - Private Subnet1'

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - PrivateRouteTable1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - Private Subnet2'

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - PrivateRouteTable2'

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW2

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  GalaxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Galaxy Application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
          Description: HTTP Access
        # - CidrIp: !Sub 
                    # - ${adip}/32
                    # - adip: !Ref ActiveDirectoryIp
          # IpProtocol: tcp
          # FromPort: 389
          # ToPort: 389
          # Description: Allow outbound 389 to access AD
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          Description: SSH # temporary
      #   - SourceSecurityGroupId: !Ref ALBSecurityGroup
      #     FromPort: 443
      #     ToPort: 443
      #     IpProtocol: tcp
      #     Description: HTTPS Access
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow outbound 443 traffic to download packages
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          Description: Allow outbound 80 traffic to download packages
        - DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          Description: Allow outbound 5432 to access Amazon RDS Aurora Database
        - CidrIp: !Sub 
                    - ${adip}/32
                    - adip: !Ref ActiveDirectoryDomainController
          IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          Description: Allow outbound 389 to access Active Directory

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - Security Group for Galaxy'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 # TODO: Move to SG to SG ref
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
          Description: everything access
      SecurityGroupEgress:
        - Description: Remove default rule for egress
          CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  AuroraPostgresCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      BackupRetentionPeriod: 7 # Ensures daily snapshots are taken
      Engine: aurora-postgresql
      DatabaseName: galaxy
      MasterUsername: !Sub '{{resolve:secretsmanager:${AuroraMasterSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${AuroraMasterSecret}:SecretString:password}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      StorageEncrypted: true
      Port: 5432
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 2

  AuroraDBPrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref AuroraPostgresCluster
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false

  AuroraMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-galaxy-database-secret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "administrator"}'
        GenerateStringKey: "password"
        ExcludeCharacters: '"@/\#|'
        PasswordLength: 16

  ADAdministratorSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub AD Secrets for Galaxy Stack ${AWS::StackName}
      GenerateSecretString:
        PasswordLength: 12
        ExcludeCharacters: '"@/\''$`,;!%'

  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-write-galaxy-logs-cloudwatch-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: !Sub ${AWS::StackName}-read-db-secret-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            Resource: !Ref AuroraMasterSecret
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-galaxy-profile
      Roles:
        - !Ref Ec2Role


  # We need a shared file system for galaxy to talk to the cluster
  SharedFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose

  # Fix back private after debug
  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedFileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

  PortalMountTargetEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      Description: Allows outbound to EFS mount target
      GroupId: !GetAtt GalaxySecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt MountTargetSecurityGroup.GroupId

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt GalaxySecurityGroup.GroupId
          Description: Ingress Rule for Galaxy
        # - IpProtocol: tcp
        #   FromPort: 2049
        #   ToPort: 2049
        #   SourceSecurityGroupId: !GetAtt HeadNodeSecurityGroup.GroupId
        #   Description: Ingress Rule for HeadNode
        # - IpProtocol: tcp
        #   FromPort: 2049
        #   ToPort: 2049
        #   SourceSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
        #   Description: Ingress Rule for ComputeNode
      SecurityGroupEgress:
        - Description: Remove default rule for egress
          CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  GalaxyServer:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - DownloadTools
            - MountEFS
            - CloudWatch
            - GalaxyDownload
            - GalaxyConfig
            - GalaxySetup
            - RunGalaxy
        DownloadTools:
          commands:
            01_update:
              command: yum update
            02_downloadnodejs:
              command: npm install --global yarn
          packages:
            yum:
              aws-cfn-bootstrap: []
              npm: []
              python3-virtualenv: []
              python3-devel: []
              gcc: []
              openldap: []
              openldap-clients: []
              openldap-devel: []
              python3-ldap3: []
              git: []
              amazon-efs-utils: []
              amazon-cloudwatch-agent: []
              jq: []
        MountEFS:
          commands:
            01_mountAtBoot:
              command: !Sub
                - echo "${efs}:/ /mnt efs _netdev,noresvport,tls,iam 0 0" >> /etc/fstab
                - efs: !Ref SharedFileSystem
            02_mountnow:
              command: !Sub
                - | 
                  while ! mount -t efs -o tls ${efs}:/ /mnt/
                  do
                    sleep 5
                  done
                - efs: !Ref SharedFileSystem
            03_createDirs: 
              command: mkdir -p /mnt/galaxy/object /mnt/galaxy/tmp /mnt/galaxy/jobs_directory /mnt/galaxy/files

        CloudWatch:
          files: 
            /etc/logrotate.d/galaxy:
              content: 
                |
                /home/galaxy/galaxy/logs {
                weekly
                rotate 8
                copytruncate
                compress
                missingok
                notifempty
                }
                /home/galaxy/galaxy/database/gravity/log {
                weekly
                rotate 8
                copytruncate
                compress
                missingok
                notifempty
                }
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content:
                |
                {
                  "agent": {
                    "metrics_collection_interval": 10,
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                  },
                  "metrics": {
                    "metrics_collected": {
                      "cpu": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                          {"name": "cpu_usage_nice", "unit": "Percent"},
                          "cpu_usage_guest"
                        ],
                        "totalcpu": false,
                        "metrics_collection_interval": 10
                      },
                      "disk": {
                        "resources": [
                          "/",
                          "/tmp"
                        ],
                        "measurement": [
                          {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                          "total",
                          "used"
                        ],
                        "ignore_file_system_types": [
                          "sysfs", "devtmpfs"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "diskio": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          "reads",
                          "writes",
                          "read_time",
                          "write_time",
                          "io_time"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "swap": {
                        "measurement": [
                          "swap_used",
                          "swap_free",
                          "swap_used_percent"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used",
                          "mem_cached",
                          "mem_total"
                        ],
                        "metrics_collection_interval": 1
                      },
                      "net": {
                        "resources": [
                          "eth0"
                        ],
                        "measurement": [
                          "bytes_sent",
                          "bytes_recv",
                          "drop_in",
                          "drop_out"
                        ]
                      },
                      "netstat": {
                        "measurement": [
                          "tcp_established",
                          "tcp_syn_sent",
                          "tcp_close"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "processes": {
                        "measurement": [
                          "running",
                          "sleeping",
                          "dead"
                        ]
                      }
                    },
                    "force_flush_interval" : 30
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                            "log_group_name": "amazon-cloudwatch-agent.log",
                            "log_stream_name": "amazon-cloudwatch-agent.log",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/home/galaxy/galaxy/logs/galaxy.logs",
                            "log_group_name": "galaxy-logs",
                            "log_stream_name": "{instance_id}-galaxy-logs",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          },
                          {
                            "file_path": "/home/galaxy/galaxy/database/gravity/log/gunicorn.log",
                            "log_group_name": "galaxy-logs",
                            "log_stream_name": "{instance_id}-gunicorn-logs",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S %z"
                          },
                          {
                            "file_path": "/home/galaxy/galaxy/database/gravity/log/celery.log",
                            "log_group_name": "galaxy-logs",
                            "log_stream_name": "{instance_id}-celery-log",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          },
                          {
                            "file_path": "/home/galaxy/galaxy/database/gravity/log/celery-beat.log",
                            "log_group_name": "galaxy-logs",
                            "log_stream_name": "{instance_id}-elery-beat-logs",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          }
                        ]
                      }
                    },
                    "log_stream_name": "my_log_stream_name",
                    "force_flush_interval" : 15
                  }
                }
              mode: '000644'
              owner: root
              group: root
          services:
            systemd:
              amazon-cloudwatch-agent:
                enabled: true
                ensureRunning: true
                files:
                  - /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        GalaxyDownload:
          users:
            galaxy:
              homeDir: "/home/galaxy"
          sources:
            /home/galaxy: https://github.com/galaxyproject/galaxy/archive/refs/heads/release_23.0.tar.gz

          commands:
            renameFolder:
              command: mv galaxy-release_23.0 galaxy
              cwd: /home/galaxy/

        GalaxyConfig:
          files:
            /home/galaxy/galaxy/updateDatabaseCredentials.sh:
              content: !Sub 
                - | 
                  #!/bin/bash

                  AURORA_SECRET=$(aws secretsmanager get-secret-value --secret-id "${aurorasecret}" --query SecretString --output text)
                  AURORA_USERNAME=$(echo $AURORA_SECRET | jq -r .username)
                  AURORA_PASSWORD=$(echo $AURORA_SECRET | jq -r .password)

                  AURORA_CONNECTION=${AuroraPostgresCluster.Endpoint.Address}

                  sed -i "s|database_connection:.*|database_connection: postgresql://$AURORA_USERNAME:$AURORA_PASSWORD@$AURORA_CONNECTION/galaxy|g" /home/galaxy/galaxy/config/galaxy.yml
                - aurorasecret: !Ref AuroraMasterSecret
              mode: 000664
              owner: galaxy
            /etc/systemd/system/galaxy.service:
              content: |
                [Unit]
                Description=Galaxy
                After=network.target
                After=time-sync.target

                [Service]
                UMask=022
                Type=simple
                User=galaxy
                Group=galaxy
                WorkingDirectory=/home/galaxy/galaxy
                TimeoutStartSec=10
                ExecStart=/home/galaxy/galaxy/.venv/bin/uwsgi --yaml /home/galaxy/galaxy/config/galaxy.yml
                Environment=HOME=/home/galaxy/galaxy VIRTUAL_ENV=/home/galaxy/galaxy/.venv PATH=/home/galaxy/galaxy/.venv/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin DOCUTILSCONFIG= PYTHONPATH=/home/galaxy/galaxy/lib/galaxy/jobs/rules
                MemoryLimit=32G
                Restart=never

                MemoryAccounting=yes
                CPUAccounting=yes
                BlockIOAccounting=yes

                [Install]
                WantedBy=multi-user.target
            /etc/systemd/system/rungalaxy.service:
              content: |
                [Unit]
                Description=Galaxy
                After=network.target
                After=time-sync.target

                [Service]
                UMask=022
                Type=simple
                User=galaxy
                Group=galaxy
                WorkingDirectory=/home/galaxy/galaxy
                TimeoutStartSec=10
                ExecStart=/home/galaxy/galaxy/run.sh
                Environment=HOME=/home/galaxy/galaxy VIRTUAL_ENV=/home/galaxy/galaxy/.venv PATH=/home/galaxy/galaxy/.venv/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin DOCUTILSCONFIG= PYTHONPATH=/home/galaxy/galaxy/lib/galaxy/jobs/rules
                MemoryLimit=32G
                Restart=never

                MemoryAccounting=yes
                CPUAccounting=yes
                BlockIOAccounting=yes

                [Install]
                WantedBy=multi-user.target                           
            /home/galaxy/galaxy/config/auth_conf.xml:
              content: !Sub 
                - |
                  <auth>
                    <authenticator>
                      <type>ldap</type>
                      <options>
                        <server>ldap://${DNSAddress}</server>
                        <allow-register>True</allow-register>
                        <allow-password-change>False</allow-password-change>
                        <login-use-username>False</login-use-username>
                        <continue-on-failure>False</continue-on-failure>

                        <search-base>${searchbase}</search-base>
                        <search-fields>sAMAccountName,mail</search-fields>
                        <search-user>${searchuser}</search-user>
                        <search-password>${searchpassword}</search-password>
                        <search-filter>(&amp;(objectClass=user)(mail={email}))</search-filter>

                        <auto-register-username>{sAMAccountName}</auto-register-username>
                        <auto-register-email>{email}</auto-register-email>
                        <auto-register-roles>{gidNumber}</auto-register-roles>
                        <auto-register>True</auto-register>
                        <auto-create-roles>False</auto-create-roles>
                        <auto-create-groups>False</auto-create-groups>
                        <auto-assign-roles-to-groups-only>False</auto-assign-roles-to-groups-only>

                        <bind-user>{sAMAccountName}</bind-user>
                        <bind-password>{password}</bind-password>
                      </options>
                    </authenticator>
                  </auth>
                - DNSAddress: !Ref ActiveDirectoryDomainController
                  searchbase: !Ref ActiveDirectoryDomainQuery
                  searchuser: !Ref ActiveDirectorySearchUser
                  searchpassword: !Ref ActiveDirectorySearchUserPassword
              mode: 000644
              owner: galaxy
            /home/galaxy/galaxy/config/object_store_conf.xml:
              content: |
                <?xml version="1.0"?>
                <object_store type="disk" store_by="uuid">
                    <files_dir path="/mnt/galaxy/objects"/>
                    <extra_dir type="temp" path="/mnt/galaxy/tmp"/>
                    <extra_dir type="job_work" path="/mnt/galaxy/jobs_directory"/>
                </object_store>
              mode: 000644
              owner: galaxy
            /home/galaxy/galaxy/config/galaxy.yml:
              content: !Sub 
              - |
                uwsgi:
                  socket: '127.0.0.1:8001'
                  mule: lib/galaxy/main.py
                  mule: lib/galaxy/main.py

                gravity:
                  galaxy_root: /home/galaxy/galaxy
                  gunicorn:
                    enable: true
                    bind: 0.0.0.0:8080
                    workers: 4

                galaxy:
                  database_connection: postgresql://AURORA_USERNAME:AURORA_PASSWORD@AURORA_CONNECTION/galaxy
                  database_wait: true

                  file_path: /mnt/galaxy/files
                  new_file_path: /mnt/galaxy/tmp

                  conda_auto_init: false
                  object_store_config_file: object_store_conf.xml
                  enable_account_interface: false
                  session_duration: 60

                  log_destination: /home/galaxy/galaxy/logs/galaxy.logs
                  log_rotate_size: '10 MB'
                  log_rotate_count: 2

                  admin_users: ${adminemails}
                  require_login: true
                  allow_user_creation: false
                  allow_user_deletion: false
              - adminemails: !Ref AdminEmailsGalaxy
              owner: galaxy

        GalaxySetup:
          commands:
            01_createLogFolder:
              command: mkdir -p galaxy/logs
              cwd: /home/galaxy/
            02_setPostgresURL:
              command: sh updateDatabaseCredentials.sh
              cwd: /home/galaxy/galaxy
            03_createVenvDirectory: 
              command: mkdir -p galaxy/.venv
              cwd: /home/galaxy/
            04_installVenvDirectory:
              command: python3 -m venv galaxy/.venv
              cwd: /home/galaxy/
            05_sourceVenvDirectory:
              command: source galaxy/.venv/bin/activate
              cwd: /home/galaxy/
            06_installPythonLdap:
              command: ./pip3 install python-ldap uwsgi
              cwd: /home/galaxy/galaxy/.venv/bin
            07_takeOwnership:
              command: chown -R galaxy /home/galaxy /mnt/galaxy
            
        RunGalaxy:
          services:
            systemd:
              galaxy:
                enabled: true
                ensureRunning: true
                files:
                  - /home/galaxy/galaxy/config
              rungalaxy:
                enabled: true
                ensureRunning: true
                files:
                  - /home/galaxy/galaxy/config

    Properties:
      InstanceType: m6i.large
      ImageId: !Ref AMIId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 60
            VolumeType: gp3
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SecurityGroupIds:
        - !Ref GalaxySecurityGroup
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /usr/bin/cfn-init --stack ${AWS::StackName} --resource GalaxyServer --region ${AWS::Region} --configsets InstallAndRun

  
  # DEBUG

  VPCPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties: 
      PeerVpcId: !Ref VPCActiveDirectory
      VpcId: !Ref VPC

  ADRoute1:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PublicRouteTable1
       DestinationCidrBlock: 172.31.0.0/16
       VpcPeeringConnectionId: !Ref VPCPeering

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC