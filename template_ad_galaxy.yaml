---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AMIId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    AllowedValues:
      - /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    Description: Amazon Machine Image (AMI) used for the Galaxy Webserver. Currently only Ubuntu 22.04 is supported.
  ActiveDirectoryDomainController:
    Type: String
    Description: IP address or DNS alias of a Active Directory domain controller
    Default: 172.31.27.214
  ActiveDirectoryDomainQuery:
    Type: String
    Description: Comma-separated list of domain container and organizational units which are granted access to Galaxy, e.g. "dc=amazon,dc=com"
    Default: "dc=matt,dc=corp,dc=cmo"
  VPCActiveDirectory:
    Type: AWS::EC2::VPC::Id
    Default: vpc-01a7f457b5802cb22
    Description: NOT NEEDED FOR PROD
  AdminEmails:
    Type: String
    Default: admin@mapk.com
    Description: A comma-separated list of email addresses with admin access.
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - VPC'
  VPCPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties: 
      PeerVpcId: !Ref VPCActiveDirectory
      VpcId: !Ref VPC

  FlowLogLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: {}

  FlowLogDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'vpc-flow-logs.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: flowlog-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt FlowLogLogGroup.Arn
  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      DeliverLogsPermissionArn: !GetAtt FlowLogDeliveryRole.Arn
      LogGroupName: !Ref FlowLogLogGroup

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - InternetGateway'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NATGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  EIP1:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  EIP2:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - PublicRouteTable1'

  DefaultPublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  ADRoute1:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PublicRouteTable1
       DestinationCidrBlock: 172.31.0.0/16
       VpcPeeringConnectionId: !Ref VPCPeering


  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - PublicRouteTable2'

  DefaultPublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.0.0/26
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - Public Subnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.0.128/26
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - Public Subnet2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - Private Subnet1'

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - PrivateRouteTable1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - Private Subnet2'

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - PrivateRouteTable2'

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW2

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  GalaxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Galaxy Application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
          Description: HTTP Access
        - CidrIp: !Sub 
                    - ${adip}/32
                    - adip: !Ref ActiveDirectoryIp
          IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          Description: Allow outbound 389 to access AD
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          Description: SSH # temporary
      #   - SourceSecurityGroupId: !Ref ALBSecurityGroup
      #     FromPort: 443
      #     ToPort: 443
      #     IpProtocol: tcp
      #     Description: HTTPS Access
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow outbound 443 traffic to download packages
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          Description: Allow outbound 80 traffic to download packages
        - DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          Description: Allow outbound 5432 to access Amazon RDS Aurora Database
        - CidrIp: !Sub 
                    - ${adip}/32
                    - adip: !Ref ActiveDirectoryDomainController
          IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          Description: Allow outbound 389 to access Active Directory

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} - Security Group for Galaxy'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 # TODO: Move to SG to SG ref
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
          Description: everything access
      SecurityGroupEgress:
        - Description: Remove default rule for egress
          CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  AuroraPostgresCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      BackupRetentionPeriod: 7 # Ensures daily snapshots are taken
      Engine: aurora-postgresql
      DatabaseName: galaxy
      MasterUsername: !Sub '{{resolve:secretsmanager:${AuroraMasterSecret}:SecretString:username}}'
      MasterUserPassword: pass1w0rd # !Sub '{{resolve:secretsmanager:${AuroraMasterSecret}:SecretString:password}}' # TODO: Remove hardcoded password; just part of dev process
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      StorageEncrypted: true
      Port: 5432
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 2

  AuroraDBPrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref AuroraPostgresCluster
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false

  AuroraMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-rds-slurm-accounting-secret
      GenerateSecretString:
        SecretStringTemplate: !Join ['', ['{"username": "administrator"}']]
        GenerateStringKey: "password"
        ExcludeCharacters: '"@/\#'
        PasswordLength: 16

  ADAdministratorSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub AD Secrets for Galaxy Stack ${AWS::StackName}
      GenerateSecretString:
        PasswordLength: 12
        ExcludeCharacters: '"@/\''$`,;!%'

  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-write-galaxy-logs-cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-galaxy-to-cloudwatch-profile
      Roles:
        - !Ref Ec2Role


  # We need a shared file system for galaxy to talk to the cluster
  SharedFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose

  # Fix back private after debug
  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedFileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

  PortalMountTargetEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      Description: Allows outbound to EFS mount target
      GroupId: !GetAtt GalaxySecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt MountTargetSecurityGroup.GroupId

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt GalaxySecurityGroup.GroupId
          Description: Ingress Rule for Galaxy
        # - IpProtocol: tcp
        #   FromPort: 2049
        #   ToPort: 2049
        #   SourceSecurityGroupId: !GetAtt HeadNodeSecurityGroup.GroupId
        #   Description: Ingress Rule for HeadNode
        # - IpProtocol: tcp
        #   FromPort: 2049
        #   ToPort: 2049
        #   SourceSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
        #   Description: Ingress Rule for ComputeNode
      SecurityGroupEgress:
        - Description: Remove default rule for egress
          CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  GalaxyServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m6i.large
      ImageId: !Ref AMIId
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 60
            VolumeType: gp3
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SecurityGroupIds:
        - !Ref GalaxySecurityGroup
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt update && sudo apt upgrade -y
            apt-get install -y npm yarn python3-venv python3-dev gcc ldap-utils libsasl2-dev libldap2-dev python3-ldap python3-ldap3 jq 

            # for use with slurm
            apt install -y slurmd slurm-client

            # Install slurm-drmaa
            add-apt-repository ppa:natefoo/slurm-drmaa
            apt install slurm-drmaa-dev -y

            # install efs-utils
            apt-get -y install git binutils
            git clone https://github.com/aws/efs-utils
            cd efs-utils
            ./build-deb.sh
            apt-get -y install ./build/amazon-efs-utils*deb

            adduser galaxy --ingroup sudo --disabled-password --gecos GECOS
            
            echo QUICKCHECK I AM INSTALLING THE CLOUDWATCHAGENT
            # install logs
            # apt-get install python2 -y
            mkdir -p /opt/aws/amazon-cloudwatch-agent/etc/
            touch /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json 

            cat << EOF >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json 
            {
              "agent": {
                "metrics_collection_interval": 10,
                "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
              },
              "metrics": {
                "metrics_collected": {
                  "cpu": {
                    "resources": [
                      "*"
                    ],
                    "measurement": [
                      {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                      {"name": "cpu_usage_nice", "unit": "Percent"},
                      "cpu_usage_guest"
                    ],
                    "totalcpu": false,
                    "metrics_collection_interval": 10
                  },
                  "disk": {
                    "resources": [
                      "/",
                      "/tmp"
                    ],
                    "measurement": [
                      {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                      "total",
                      "used"
                    ],
                    "ignore_file_system_types": [
                      "sysfs", "devtmpfs"
                    ],
                    "metrics_collection_interval": 60
                  },
                  "diskio": {
                    "resources": [
                      "*"
                    ],
                    "measurement": [
                      "reads",
                      "writes",
                      "read_time",
                      "write_time",
                      "io_time"
                    ],
                    "metrics_collection_interval": 60
                  },
                  "swap": {
                    "measurement": [
                      "swap_used",
                      "swap_free",
                      "swap_used_percent"
                    ]
                  },
                  "mem": {
                    "measurement": [
                      "mem_used",
                      "mem_cached",
                      "mem_total"
                    ],
                    "metrics_collection_interval": 1
                  },
                  "net": {
                    "resources": [
                      "eth0"
                    ],
                    "measurement": [
                      "bytes_sent",
                      "bytes_recv",
                      "drop_in",
                      "drop_out"
                    ]
                  },
                  "netstat": {
                    "measurement": [
                      "tcp_established",
                      "tcp_syn_sent",
                      "tcp_close"
                    ],
                    "metrics_collection_interval": 60
                  },
                  "processes": {
                    "measurement": [
                      "running",
                      "sleeping",
                      "dead"
                    ]
                  }
                },
                "force_flush_interval" : 30
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                        "log_group_name": "amazon-cloudwatch-agent.log",
                        "log_stream_name": "amazon-cloudwatch-agent.log",
                        "timezone": "UTC"
                      },
                      {
                        "file_path": "/home/galaxy/galaxy/galaxy.logs",
                        "log_group_name": "galaxy-logs",
                        "log_stream_name": "{instance_id}-galaxy-logs",
                        "timezone": "Local",
                        "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                      },
                      {
                        "file_path": "/home/galaxy/galaxy/database/gravity/log/gunicorn.log",
                        "log_group_name": "galaxy-logs",
                        "log_stream_name": "{instance_id}-gunicorn-logs",
                        "timestamp_format": "%Y-%m-%d %H:%M:%S %z"
                      },
                      {
                        "file_path": "/home/galaxy/galaxy/database/gravity/log/celery.log",
                        "log_group_name": "galaxy-logs",
                        "log_stream_name": "{instance_id}-celery-log",
                        "timezone": "Local",
                        "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                      },
                      {
                        "file_path": "/home/galaxy/galaxy/database/gravity/log/celery-beat.log",
                        "log_group_name": "galaxy-logs",
                        "log_stream_name": "{instance_id}-elery-beat-logs",
                        "timezone": "Local",
                        "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                      }
                    ]
                  }
                },
                "log_stream_name": "my_log_stream_name",
                "force_flush_interval" : 15
              }
            }
            EOF


            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            dpkg -i -E ./amazon-cloudwatch-agent.deb
            systemctl start amazon-cloudwatch-agent.service
            systemctl enable amazon-cloudwatch-agent.service

            echo "galaxy ALL=(ALL:ALL) NOPASSWD: ALL" | tee /etc/sudoers.d/galaxy
            echo '$nrconf{restart} = '"'a';" | sudo tee -a /etc/needrestart/needrestart.conf

            sudo -u galaxy -i << 'EOF'
            cd ~
            AURORA_USERNAME=${aurorausername}
            AURORA_PASSWORD=${aurorapassword}
            AURORA_CONNECTION=${AuroraPostgresCluster.Endpoint.Address}
            
            # install galaxy
            git clone -b release_23.0 https://github.com/galaxyproject/galaxy.git galaxy 
            cp galaxy/config/galaxy.yml.sample galaxy/config/galaxy.yml
            touch galaxy/config/auth_conf.xml
            sed -i "s/# bind: localhost:8080/bind: 0.0.0.0:8080/" galaxy/config/galaxy.yml
            sed -i "s/#auth_config_file: auth_conf.xml/auth_config_file: auth_conf.xml/" galaxy/config/galaxy.yml
            sed -i "s/#show_user_prepopulate_form: false/show_user_prepopulate_form: true/" galaxy/config/galaxy.yml
            sed -i "s/#admin_users: null/admin_users: ${adminEmail}/" galaxy/config/galaxy.yml
            mkdir galaxy/logs
            sed -i "s=#log_destination: stdout=log_destination: /home/galaxy/galaxy/galaxy.logs/=" galaxy/config/galaxy.yml
            sed -i "s/#database_connection: null/database_connection: postgresql:\/\/$AURORA_USERNAME:$AURORA_PASSWORD@$AURORA_CONNECTION\/galaxy/" galaxy/config/galaxy.yml
            sed -i "s/#object_store_config_file: object_store_conf.xml/object_store_config_file: object_store_conf.xml/" galaxy/config/galaxy.yml

            cat << EOS >> galaxy/config/auth_conf.xml
            <auth>
              <authenticator>
                <type>ldap</type>
                <options>
                  <server>ldap://${DNSAddress}</server>
                  <allow-register>True</allow-register>
                  <allow-password-change>False</allow-password-change>
                  <login-use-username>False</login-use-username>
                  <continue-on-failure>False</continue-on-failure>

                  <search-base>${searchbase}</search-base>
                  <search-fields>sAMAccountName,mail</search-fields>
                  <search-user>${searchuser}</search-user>
                  <search-password>${searchpassword}</search-password>
                  #service account w/ read-only, never expired 
                  <search-filter>(&amp;(objectClass=user)(mail={email}))</search-filter>

                  <auto-register-username>{sAMAccountName}</auto-register-username>
                  <auto-register-email>{email}</auto-register-email>
                  <auto-register-roles>{gidNumber}</auto-register-roles>
                  <auto-register>True</auto-register>
                  <auto-create-roles>False</auto-create-roles>
                  <auto-create-groups>False</auto-create-groups>
                  <auto-assign-roles-to-groups-only>False</auto-assign-roles-to-groups-only>

                  <bind-user>{sAMAccountName}</bind-user>
                  <bind-password>{password}</bind-password>
                </options>
                </authenticator>
            </auth>
            EOS

            cat << EOS >> galaxy/config/object_store_conf.xml
            <?xml version="1.0"?>
            <object_store type="disk" store_by="uuid">
                <files_dir path="/mnt/galaxy/objects"/>
                <extra_dir type="temp" path="/mnt/galaxy/tmp"/>
                <extra_dir type="job_work" path="/mnt/galaxy/jobs_directory"/>
            </object_store>
            EOS

            mkdir -p galaxy/.venv
            python3 -m venv galaxy/.venv

            source galaxy/.venv/bin/activate
            pip3 install python-ldap

            sh galaxy/run.sh --no-create-venv --daemon & 
            
            EOF

            echo QUICKCHECK I AM MOUNTING ${efs}
            mount -t efs -o tls ${efs}:/ /mnt/
            mkdir -p /mnt/galaxy/object /mnt/galaxy/tmp /mnt/galaxy/jobs_directory
            chown -R galaxy /mnt/galaxy

            cat << EOS >> /etc/logrotate.d/galaxy
            /home/galaxy/galaxy/logs {
              weekly
              rotate 8
              copytruncate
              compress
              missingok
              notifempty
            }
            EOS
            

          - DNSAddress: !Ref ActiveDirectoryDomainController
            adminEmail: !Ref AdminEmails
            aurorausername: administrator
            aurorapassword: pass1w0rd
            searchuser: admin@matt.corp.cmo
            searchpassword: 3141ma!@#
            efs: !Ref SharedFileSystem
            searchbase: !Ref ActiveDirectoryDomainQuery
    
        

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  PrivateSubnet1:
    Description: Private Subnet ID
    Value: !Ref PrivateSubnet1

